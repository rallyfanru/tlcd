#define LCD_CMD_ONOFF 0B0011111100000000
#define LCD_CMD_SETY 0B0100000000000000
#define LCD_CMD_SETX 0B1011100000000000
#define LCD_CMD_WRITE 0B0000000000100000

#define CS1 3
#define CS2 4
#define DI 6
#define RW 7
#define E 8 
#define DB0 9 
#define DB1 10 
#define DB2 11 
#define DB3 12 
#define DB4 13 
#define DB5 14 
#define DB6 15 
#define DB7 16 

byte font [96] [5] PROGMEM = {
  { 0x00, 0x00, 0x00, 0x00, 0x00 }, // space  (0x20)
  { 0x00, 0x00, 0x2F, 0x00, 0x00 }, // !
  { 0x00, 0x07, 0x00, 0x07, 0x00 }, // "
  { 0x14, 0x7F, 0x14, 0x7F, 0x14 }, // #
  { 0x24, 0x2A, 0x7F, 0x2A, 0x12 }, // $
  { 0x23, 0x13, 0x08, 0x64, 0x62 }, // %
  { 0x36, 0x49, 0x55, 0x22, 0x50 }, // &
  { 0x00, 0x05, 0x03, 0x00, 0x00 }, // '
  { 0x00, 0x1C, 0x22, 0x41, 0x00 }, // (
  { 0x00, 0x41, 0x22, 0x1C, 0x00 }, // (
  { 0x14, 0x08, 0x3E, 0x08, 0x14 }, // *
  { 0x08, 0x08, 0x3E, 0x08, 0x08 }, // +
  { 0x00, 0x50, 0x30, 0x00, 0x00 }, // ,
  { 0x08, 0x08, 0x08, 0x08, 0x08 }, // -
  { 0x00, 0x30, 0x30, 0x00, 0x00 }, // .
  { 0x20, 0x10, 0x08, 0x04, 0x02 }, // /
   
  { 0x3E, 0x51, 0x49, 0x45, 0x3E }, // 0  (0x30)
  { 0x00, 0x42, 0x7F, 0x40, 0x00 }, // 1
  { 0x42, 0x61, 0x51, 0x49, 0x46 }, // 2
  { 0x21, 0x41, 0x45, 0x4B, 0x31 }, // 3
  { 0x18, 0x14, 0x12, 0x7F, 0x10 }, // 4
  { 0x27, 0x45, 0x45, 0x45, 0x39 }, // 5
  { 0x3C, 0x4A, 0x49, 0x49, 0x30 }, // 6
  { 0x01, 0x71, 0x09, 0x05, 0x03 }, // 7
  { 0x36, 0x49, 0x49, 0x49, 0x36 }, // 8
  { 0x06, 0x49, 0x49, 0x29, 0x1E }, // 9
  { 0x00, 0x36, 0x36, 0x00, 0x00 }, // :
  { 0x00, 0x56, 0x36, 0x00, 0x00 }, // ;
  { 0x08, 0x14, 0x22, 0x41, 0x00 }, // <
  { 0x14, 0x14, 0x14, 0x14, 0x14 }, // =
  { 0x00, 0x41, 0x22, 0x14, 0x08 }, // >
  { 0x02, 0x01, 0x51, 0x09, 0x06 }, // ?
  
  { 0x32, 0x49, 0x79, 0x41, 0x3E }, // @  (0x40)
  { 0x7E, 0x11, 0x11, 0x11, 0x7E }, // A
  { 0x7F, 0x49, 0x49, 0x49, 0x36 }, // B
  { 0x3E, 0x41, 0x41, 0x41, 0x22 }, // C
  { 0x7F, 0x41, 0x41, 0x22, 0x1C }, // D
  { 0x7F, 0x49, 0x49, 0x49, 0x41 }, // E
  { 0x7F, 0x09, 0x09, 0x09, 0x01 }, // F
  { 0x3E, 0x41, 0x49, 0x49, 0x7A }, // G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F }, // H
  { 0x00, 0x41, 0x7F, 0x41, 0x00 }, // I
  { 0x20, 0x40, 0x41, 0x3F, 0x01 }, // J
  { 0x7F, 0x08, 0x14, 0x22, 0x41 }, // K
  { 0x7F, 0x40, 0x40, 0x40, 0x40 }, // L
  { 0x7F, 0x02, 0x0C, 0x02, 0x7F }, // M
  { 0x7F, 0x04, 0x08, 0x10, 0x7F }, // N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E }, // O
  
  { 0x3F, 0x09, 0x09, 0x09, 0x06 }, // P  (0x50)
  { 0x3E, 0x41, 0x51, 0x21, 0x5E }, // Q
  { 0x7F, 0x09, 0x19, 0x29, 0x46 }, // R
  { 0x46, 0x49, 0x49, 0x49, 0x31 }, // S
  { 0x01, 0x01, 0x7F, 0x01, 0x01 }, // T
  { 0x3F, 0x40, 0x40, 0x40, 0x3F }, // U
  { 0x1F, 0x20, 0x40, 0x20, 0x1F }, // V
  { 0x3F, 0x40, 0x30, 0x40, 0x3F }, // W
  { 0x63, 0x14, 0x08, 0x14, 0x63 }, // X
  { 0x07, 0x08, 0x70, 0x08, 0x07 }, // Y
  { 0x61, 0x51, 0x49, 0x45, 0x43 }, // Z
  { 0x00, 0x7F, 0x41, 0x41, 0x00 }, // [
  { 0x02, 0x04, 0x08, 0x10, 0x20 }, // backslash
  { 0x00, 0x41, 0x41, 0x7F, 0x00 }, // ]
  { 0x04, 0x02, 0x01, 0x02, 0x04 }, // ^
  { 0x40, 0x40, 0x40, 0x40, 0x40 }, // _
  
  { 0x00, 0x01, 0x02, 0x04, 0x00 }, // `  (0x60)
  { 0x20, 0x54, 0x54, 0x54, 0x78 }, // a
  { 0x7F, 0x50, 0x48, 0x48, 0x30 }, // b
  { 0x38, 0x44, 0x44, 0x44, 0x20 }, // c
  { 0x38, 0x44, 0x44, 0x48, 0x7F }, // d
  { 0x38, 0x54, 0x54, 0x54, 0x18 }, // e
  { 0x08, 0x7E, 0x09, 0x01, 0x02 }, // f
  { 0x0C, 0x52, 0x52, 0x52, 0x3E }, // g
  { 0x7F, 0x08, 0x04, 0x04, 0x78 }, // h
  { 0x00, 0x44, 0x7D, 0x40, 0x00 }, // i
  { 0x20, 0x40, 0x44, 0x3D, 0x00 }, // j
  { 0x7F, 0x10, 0x28, 0x44, 0x00 }, // k
  { 0x00, 0x41, 0x7F, 0x40, 0x00 }, // l
  { 0x7C, 0x04, 0x18, 0x04, 0x78 }, // m
  { 0x7C, 0x08, 0x04, 0x04, 0x78 }, // n
  { 0x38, 0x44, 0x44, 0x44, 0x38 }, // o
  
  { 0x7C, 0x14, 0x14, 0x14, 0x08 }, // p  (0x70)
  { 0x08, 0x14, 0x14, 0x08, 0x7C }, // q
  { 0x7C, 0x08, 0x04, 0x04, 0x08 }, // r
  { 0x48, 0x54, 0x54, 0x54, 0x20 }, // s
  { 0x04, 0x3F, 0x44, 0x40, 0x20 }, // t
  { 0x3C, 0x40, 0x40, 0x20, 0x7C }, // u
  { 0x1C, 0x20, 0x40, 0x20, 0x1C }, // v
  { 0x3C, 0x40, 0x30, 0x40, 0x3C }, // w
  { 0x44, 0x28, 0x10, 0x28, 0x44 }, // x
  { 0x0C, 0x50, 0x50, 0x50, 0x3C }, // y
  { 0x44, 0x64, 0x54, 0x4C, 0x44 }, // z
  { 0x00, 0x08, 0x36, 0x41, 0x00 }, // {
  { 0x00, 0x00, 0x7F, 0x00, 0x00 }, // |
  { 0x00, 0x41, 0x36, 0x08, 0x00 }, // }
  { 0x30, 0x08, 0x10, 0x20, 0x18 }, // ~
  { 0x7F, 0x55, 0x49, 0x55, 0x7F }  // unknown char (0x7F)
  
};


void lcd_clear(byte fill);
uint16_t set_data_bits(byte data);
void lcd_on(byte chip);
void lcd_goto(byte x, byte y);
void lcd_write(byte data);

MCP mcpchip(0); 

uint16_t chipselect=0;

uint16_t set_data_bits(byte data){
	
	// Serial.println(data,BIN);
	// Serial.println("5432109876543210");
	
	uint16_t result=0;

	result |= ( (uint16_t)(data & 1) << (DB0 - 1) );
	result |= ( (uint16_t)((data >> 1) & 1) << (DB1 - 1) );
	result |= ( (uint16_t)((data >> 2) & 1) << (DB2 - 1) );
	result |= ( (uint16_t)((data >> 3) & 1) << (DB3 - 1) );
	result |= ( (uint16_t)((data >> 4) & 1) << (DB4 - 1) );
	result |= ( (uint16_t)((data >> 5) & 1) << (DB5 - 1) );
	result |= ( (uint16_t)((data >> 6) & 1) << (DB6 - 1) );
	result |= ( (uint16_t)((data >> 7) & 1) << (DB7 - 1) );

	// Serial.println(result,BIN);
	// Serial.println();
	return result;
}

void lcd_on(byte chip=0) {

	uint16_t cspin = 0;

	switch(chip){
		case 1:
			cspin = 1 << (CS1 - 1);
			break;
		
		case 2:
			cspin = 1 << (CS2 - 1);
			break;

		default:
			lcd_on(1);
			lcd_on(2);
			;
	}

	//Включение
	mcpchip.digitalWrite(LCD_CMD_ONOFF | cspin);	//Команда на включение
	mcpchip.digitalWrite(LCD_CMD_ONOFF | cspin | (1 << (E-1))); //Дрыг линией Е
	mcpchip.digitalWrite(LCD_CMD_ONOFF | cspin); 	//Линию Е обратно в 0

}

void lcd_clear(byte fill=0){

	
		for(byte x=0; x<8; x++){
			lcd_goto(x,0);
			for(byte y=0; y<64; y++) lcd_write(fill);
		}
	

	
		for(byte x=0; x<8; x++){
			lcd_goto(x,64);	
			for(byte y=0; y<64; y++) lcd_write(fill);
		}
	


}


void lcd_goto(byte x, byte y){

	if(y > 63){
		chipselect = 1 << (CS2 - 1);
		y-=64;
	}else{
		chipselect = 1 << (CS1 - 1);
	}

	mcpchip.digitalWrite(LCD_CMD_SETY | set_data_bits(y) | chipselect); 
	mcpchip.digitalWrite(LCD_CMD_SETY | set_data_bits(y) | chipselect | (1 << (E-1)));
	mcpchip.digitalWrite(LCD_CMD_SETY | set_data_bits(y) | chipselect );

	mcpchip.digitalWrite(LCD_CMD_SETX | set_data_bits(x) | chipselect);  
	mcpchip.digitalWrite(LCD_CMD_SETX | set_data_bits(x) | (1 << (E-1)));
	mcpchip.digitalWrite(LCD_CMD_SETX | set_data_bits(x) | chipselect );


}

void lcd_write(byte data){

	if(!chipselect) lcd_goto(0,0);

	mcpchip.digitalWrite(LCD_CMD_WRITE | set_data_bits(data) | chipselect);
	mcpchip.digitalWrite(LCD_CMD_WRITE | set_data_bits(data) | chipselect | (1 << (E-1)));
	mcpchip.digitalWrite(LCD_CMD_WRITE | set_data_bits(data) | chipselect);


}

void lcd_letter (byte c)
{
  if (c < 0x20 || c > 0x7F)
    c = 0x7F;  
  
  c -= 0x20; 
  
  //if (_lcdx >= 60 && _chipSelect == LCD_CS2) gotoxy (0, _lcdy + 8);
  
  for (byte x = 0; x < 5; x++)
    lcd_write (pgm_read_byte (&font [c] [x]));
  	lcd_write (0);   //пробел в пиксель между символами
} 


void lcd_string (const char * s)
{
  char c;
  while (c = *s++)
    lcd_letter(c); 
} 

